[{"id":0,"href":"/tutorials/forking-a-debian-package/","title":"Forking a Debian Package","parent":"Tutorials","content":"Debian is an operating system with a rich packaging format and dependency resolution system. It runs on the Linux kernel and provides over 80,000 packages. Packages ranging from shells like bash, server software like nginx, desktop software like Firefox, and even full-blown desktop environments like Gnome. The Ubuntu operating system is a Debian variant which adopts many of the same packages as Debian, providing a commercial facade and a different, potentially favorable package lifecycle. Every two years Ubuntu names a Long Term Support (LTS) release, in this article we\u0026rsquo;ll focus on Ubuntu 22.04 codenamed Jammy, an LTS supported through 2027.\nRDKit is a C++ library and suite of Java/Python modules. Unfortunately Ubuntu Jammy is providing RDKit 202109 and will not update the major version. Ubuntu releases pin their entire dependency tree except for bug and security patches. The RDKit-rs project needs to be flexible and stay up to date on RDKit changes upstream. We anticipate finding bugs and potentially customizing the RDKit C++ to meet our needs. In short, the RDKit-rs project needs a lot more control over RDKit.\nHow can we fork a Debian package?     Forking is a very common thing to solve in the world of git, you just hit the fork button on Github and copy the repository to your account. Or perhaps you need to fork a docker image? You can either layer your changes on top of the original image or you can take the Dockerfile and customize it to your needs, with easy distribution through docker push/docker pull to a repository. Unfortunately things are not so easy in the Debian world.\nWe\u0026rsquo;ll need to understand:\n what a Debian package is how to build a package how RDKit is packaged how to distribute custom Debian packages. We won\u0026rsquo;t cover starting a package from scratch.  Debian Source Packages     One goal of Debian is to run herd on the 80,000+ open source packages. Debian does not maintain forks of these projects, instead preferring static snapshots of the package source code. Source code is packaged as an untouched .tar.gz and can be uploaded to Debian repositories for download by clients.\nOnce the source is packaged it\u0026rsquo;s time to answer the questions \u0026ldquo;how do we build something usable out of this source code?\u0026rdquo;. No need to learn how to build every piece of software, the mechanical steps are captured by the Debian packaging rules. And similarly, no need to manually fetch build-time and run-time dependencies for software, those can be tracked by the Debian package description.\nBuilding A Binary Package From Source     A classic Debian packaging project laid out on disk might look like:\n# apt-get source bash # tree . |-- bash-5.1 | |-- ABOUT-NLS | |-- AUTHORS |-- bash_5.1-6ubuntu1.debian.tar.xz |-- bash_5.1-6ubuntu1.dsc `-- bash_5.1.orig.tar.xz  The bash-5.1 directory is unpacked for your convenience using the .orig.tar.xz. You will need to be inside this directory to build the package.\nThe bash_5.1-6ubuntu1.debian.tar.xz contains all the Debian patches and build instructions. This is a big source of value as it provides a common surface to the package and once you learn how the parts work you can customize any package.\nThe bash_5.1-6ubuntu1.dsc contains the metadata like build-depends so you can easily fetch required packages to build the software, or depends for required packages to run the software. It also includes security features like GPG signature from the packaging author.\nAnd finally bash_5.1.orig.tar.xz is the untouched snapshot of the source code from the upstream project. No need to go the bash website to fetch this software, and no need to worry about the software project deleting a version of software.\nBuild the software with the packaging rules as-is:\n# ls bash-5.1 bash_5.1-6ubuntu1.debian.tar.xz bash_5.1-6ubuntu1.dsc bash_5.1.orig.tar.xz # cd bash-5.1 bash-5.1 # dpkg-buildpackage [[ SNIP ]] dpkg-checkbuilddeps: error: Unmet build dependencies: bison libncurses5-dev texinfo texi2html sharutils locales time texlive-latex-base ghostscript texlive-fonts-recommended man2html-base  The Debian packaging system doesn\u0026rsquo;t need to build the software to know we don\u0026rsquo;t have all our prerequisites. We can just install those with the following:\napt-get install -y bison libncurses5-dev texinfo texi2html sharutils locales time texlive-latex-base ghostscript texlive-fonts-recommended man2html-base  In the future we\u0026rsquo;ll use mechanisms that auto install build dependencies. But after running that install manually we try again:\nbash-5.1# dpkg-buildpackage dpkg-buildpackage: info: source package bash dpkg-buildpackage: info: source version 5.1-6ubuntu1 dpkg-buildpackage: info: source distribution jammy dpkg-buildpackage: info: source changed by Matthias Klose \u0026lt;doko@ubuntu.com\u0026gt; dpkg-buildpackage: info: host architecture arm64 [[[ SNIP ]]] Beginning configuration for bash-5.1-release for aarch64-unknown-linux-gnu checking for gcc... gcc checking whether the C compiler works... yes checking for C compiler default output file name... a.out checking for suffix of executables... checking whether we are cross compiling... no checking for suffix of object files... o checking whether we are using the GNU C compiler... yes checking whether gcc accepts -g... yes  What\u0026rsquo;s great is that we don\u0026rsquo;t know all the details for how bash is built. No wrangling autotools, cmake, Makefile, etc. The goal of building a binary has been boiled down to invoking dpkg-buildpackage. And for the most part you will use pre-built binaries from the Debian or Ubuntu build farms.\nFinding Updated Packages     It\u0026rsquo;s great to be able to pull down the source code from the operating system\u0026rsquo;s repositories. But the development of that package must happen somewhere, new package versions don\u0026rsquo;t just snap in to existence, they flow from less stable releases to more stable releases over time.\nIf we could just grab that latest work, take responsibility for its contents, we could build it ourselves and hit fast-forward on versions.\nUnfortunately, at this time of writing, I\u0026rsquo;m not sure where Ubuntu collaborates on packaging definitions. But we know that Debian packages migrate to Ubuntu over time, and it\u0026rsquo;s safe to assume Debian is the originator of the RDKit packaging definition.\nEnter salsa.debian.org, a gitlab installation and modern home for collaborating on packages in a format that might be familiar to software developers. Specifically we can look at the DebiChem Pure Blend (a special interest group focused on making \u0026ldquo;Debian a good platform for chemists in their day-to-day work\u0026rdquo;) and more specifically we can look at the DebiChem Salsa Organization and their RDkit project.\nWe\u0026rsquo;re going to take the RDKit definition from Salsa and make it our own.\nUsing git to build source packages     In our opening bash example we were able to pull sources from our regular repository and just build the software. But when package definitions are tracked in git we have to use modified techniques. And luckily for us the tooling around packages in git is quite mature and just the right kind of esoteric.\nThe RDKit salsa repository carries on the tradition of tracking snapshots of the upstream source code \u0026ndash; the repository does not track the official RDKit repository, instead RDKit on Salsa unpacks static releases and tracks their contents as-is. It does not carry any commit history from upstream.\nEach official RDKit release is tracked with a corresponding tag. For example, RDKit 202209.3 gets the tag 202209.3. But in the master branch there is a mix of RDKit C++ code and Debian packaging description in the debian folder. The tree looks something like this:\n% tree . . ├── CMakeLists.txt ├── CTestConfig.cmake ├── CTestCustom.ctest.in ├── Code │ ├── CMakeLists.txt [[ SNIP ]] ├── debian │ ├── TODO │ ├── changelog │ ├── clean │ ├── control │ ├── control.in │ ├── copyright │ ├── gbp.conf │ ├── librdkit-dev.install │ ├── librdkit1.install │ ├── librdkit1.lintian-overrides │ ├── patches │ │ ├── NoDownloads.patch [[ SNIP ]] │ ├── pgversions │ ├── python-rdkit.links │ ├── rdkit-data.install │ ├── rdkit-doc.dirs │ ├── rdkit-doc.doc-base │ ├── rules │ ├── salsa-ci.yml │ ├── source │ │ ├── format │ │ └── lintian-overrides │ ├── tests │ │ ├── control │ │ └── installcheck │ ├── upstream │ │ └── metadata │ └── watch  Updating to a newer RDKit release would essential mean clobbering everything outside the debian/ directory with the contents of the Release_YYYY_MM_B.zip downloaded from the RDKit GitHub releases. It does seem messy to throw away the commit history of the repository but Debian is only interest in packaging defined releases, something considered stable software by the source authors.\nWe can use gbp (aka, git-buildpackage) to take a tag, build a source .orig.tar.xz and then apply the debian/ rules to construct a binary package. Think of it like a git-centric workflow using the dpkg-buildpackage from before alongside a variety of quality-improving tools we\u0026rsquo;ll cover as we go.\nBut let\u0026rsquo;s grab rdkit from salsa:\n# apt-get install -y git-buildpackage # git clone https://salsa.debian.org/debichem-team/rdkit.git # cd rdkit/  First we\u0026rsquo;ll consider the top entry in the debian/changelog, this will dictate the version assigned to the package:\n# cat debian/changelog rdkit (202209.3-2) UNRELEASED; urgency=medium -- Debichem Team \u0026lt;debichem-devel@lists.alioth.debian.org\u0026gt; Sat, 14 Jan 2023 13:33:42 +0100  So the changelog doesn\u0026rsquo;t say much for humans, but it gives the version (202209.3-2), author (Debichem Team) and the date the changelog was generated (Sat, 14 Jan 2023 13:33:42 +0100). So we expect if we use the right incantations we can build rdkit 202209.3-2.\nrdkit # gbp buildpackage gbp:error: Pristine-tar couldn't verify \u0026quot;rdkit_202209.3.orig.tar.xz\u0026quot;: fatal: path 'rdkit_202209.3.orig.tar.xz.delta' does not exist in 'refs/remotes/origin/pristine-tar' pristine-tar: git show refs/remotes/origin/pristine-tar:rdkit_202209.3.orig.tar.xz.delta failed  I don\u0026rsquo;t know why we need a pristine tar ref. So we can tell gbp to skip it and try again:\nrdkit# gbp buildpackage --git-no-pristine-tar gbp:info: Performing the build debuild: warning: debian/changelog(l4): found trailer where expected start of change data LINE: -- Debichem Team \u0026lt;debichem-devel@lists.alioth.debian.org\u0026gt; Sat, 14 Jan 2023 13:33:42 +0100 dpkg-buildpackage -us -uc -ui -i -I dpkg-buildpackage: warning: debian/changelog(l4): found trailer where expected start of change data [[[ SNIP ]]] dpkg-buildpackage -us -uc -ui -i -I failed gbp:error: 'debuild -i -I' failed: it exited with 29  Ah, our old friend dpkg-buildpackage shows up again. But it fails, it looks like the debian changelog is not suitable for a build just yet (submitting broken code happens!), we can edit the changelog:\nrdkit# cat debian/changelog | head -n 10 rdkit (202209.3-2) UNRELEASED; urgency=medium * Just filling this in -- Debichem Team \u0026lt;debichem-devel@lists.alioth.debian.org\u0026gt; Sat, 14 Jan 2023 13:33:42 +0100  And try again:\nrdkit # gbp buildpackage --git-no-pristine-tar gbp:error: You have uncommitted changes in your source tree: gbp:error: On branch master Your branch is up to date with 'origin/master'.  Turns out the process of running buildpackage had applied patches and dirtied our git checkout, making gbp suspicious the project was no longer suitable for release. We can add on another flag to ignore dirty changes in the git repo:\nrdkit # gbp buildpackage --git-no-pristine-tar --git-ignore-new [[[ SNIP ]]] dpkg-checkbuilddeps: error: Unmet build dependencies: catch2 cmake dh-python doxygen flex imagemagick latexmk libboost-dev libboost-iostreams-dev libboost-python-dev libboost-regex-dev libboost-system-dev libboost-thread-dev libcairo-dev libcoordgen-dev libeigen3-dev libfreetype6-dev libmaeparser-dev librsvg2-bin libsqlite3-dev pandoc postgresql-server-dev-all python3-dev python3-numpy python3-pandas python3-pil | python3-imaging python3-recommonmark python3-sphinx python3-sqlalchemy rapidjson-dev texlive-latex-extra texlive-latex-recommended dpkg-buildpackage: warning: build dependencies/conflicts unsatisfied; aborting  And again we have an error, similar to the bash build before we are missing dependencies required to compile the code. The tools won\u0026rsquo;t automatically install the build dependencies as that could be messy in a dev environment. Why don\u0026rsquo;t we just jump to sandboxing a build, no need in potentially muddying up a developers OS.\nSandboxing A Build     We want to build our software but we don\u0026rsquo;t want to muddy up the base OS. Fortunately debootstrap can populate a fresh filesystem inside a directory, a perfect OS for using chroot and friends to \u0026ldquo;move into\u0026rdquo; a sandbox. The gbp tool prefers to use cowbuilder for moving into a sandbox, making it easy to track changes done while building and then resetting the changes, avoiding a potentially expensive debootstrap to recreate the filesystem.\nrdkit# gbp buildpackage --git-no-pristine-tar --git-ignore-new --git-pbuilder gbp:info: Building with (cowbuilder) for sid gbp:info: Performing the build Base directory /var/cache/pbuilder/base.cow does not exist gbp:error: 'git-pbuilder' failed: it exited with 1  We have to bootstrap that chroot jail ourselves, setting the distribution name (by default it wants debian sid). And keep in mind this will inherit the mirror used in the host OS, I ran this command from a jammy host on aarch64 hence the use ports.ubuntu.com. If you are going to use a distribution other than Jammy you need to specify --mirror.\nrdkit # DIST=jammy git-pbuilder create I: Invoking pbuilder I: forking: pbuilder create --buildplace /var/cache/pbuilder/base-jammy.cow --mirror http://ports.ubuntu.com/ubuntu-ports/ --distribution jammy --no-targz --extrapackages cowdancer W: /root/.pbuilderrc does not exist I: Running in no-targz mode W: cgroups are not available on the host, not using them. I: Distribution is jammy. I: Current time: Wed Mar 8 05:28:28 GMT 2023 I: pbuilder-time-stamp: 1678253308 I: Building the build environment I: running debootstrap /usr/sbin/debootstrap [[[ SNIP ]]] I: Resolving dependencies of required packages... I: Resolving dependencies of base packages... I: Checking component main on http://ports.ubuntu.com/ubuntu-ports... I: Retrieving adduser 3.118ubuntu5 I: Validating adduser 3.118ubuntu5 I: Retrieving apt 2.4.5 I: Validating apt 2.4.5 [[[ SNIP ]]] rdkit # du -hs /var/cache/pbuilder/base-jammy.cow 422M /var/cache/pbuilder/base-jammy.cow  and again we retry the sandboxed build, making sure to set the dist option so gbp will reuse the deboostrap\u0026rsquo;d filesystem:\nrdkit# gbp buildpackage --git-no-pristine-tar --git-ignore-new --git-pbuilder --git-dist=jammy gbp:info: Building with (cowbuilder) for jammy gbp:info: Performing the build Building with cowbuilder for distribution jammy W: /root/.pbuilderrc does not exist I: using cowbuilder as pbuilder dpkg-checkbuilddeps: error: Unmet build dependencies: bison catch2 cmake dh-python doxygen flex imagemagick latexmk libboost-dev libboost-iostreams-dev libboost-python-dev libboost-regex-dev libboost-system-dev libboost-thread-dev libcairo-dev libcoordgen-dev libeigen3-dev libfreetype6-dev libmaeparser-dev librsvg2-bin libsqlite3-dev pandoc postgresql-server-dev-all python3-dev python3-numpy python3-pandas python3-pil | python3-imaging python3-recommonmark python3-sphinx python3-sqlalchemy rapidjson-dev tex-gyre texlive-fonts-recommended texlive-latex-base texlive-latex-extra texlive-latex-recommended W: Unmet build-dependency in source dh /usr/share/postgresql-common/pgxs_debian_control.mk --with python3 --buildsystem=cmake --parallel dh: error: unable to load addon python3: Can't locate Debian/Debhelper/Sequence/python3.pm in @INC (you may need to install the Debian::Debhelper::Sequence::python3 module) (@INC contains: /etc/perl /usr/local/lib/aarch64-linux-gnu/perl/5.34.0 /usr/local/share/perl/5.34.0 /usr/lib/aarch64-linux-gnu/perl5/5.34 /usr/share/perl5 /usr/lib/aarch64-linux-gnu/perl-base /usr/lib/aarch64-linux-gnu/perl/5.34 /usr/share/perl/5.34 /usr/local/lib/site_perl) at (eval 13) line 1. BEGIN failed--compilation aborted at (eval 13) line 1.  You might be tempted to try and install the build dependencies because you google around and learn you can log in to the chroot environment and execute arbitrary commands. Don\u0026rsquo;t go down that path, the error your are seeing is not really an error and will be resolved by the dpkg machinery. The issue is really that dh-python is not installed on the host OS.\nrdkit# apt-get install -y dh-python [[[ SNIP ]]]  And then try again:\nrdkit# gbp buildpackage --git-no-pristine-tar --git-ignore-new --git-pbuilder --git-dist=jammy gbp:info: Building with (cowbuilder) for jammy gbp:info: Performing the build Building with cowbuilder for distribution jammy W: /root/.pbuilderrc does not exist I: using cowbuilder as pbuilder dpkg-checkbuilddeps: error: Unmet build dependencies: bison catch2 cmake doxygen flex imagemagick latexmk libboost-dev libboost-iostreams-dev libboost-python-dev libboost-regex-dev libboost-system-dev libboost-thread-dev libcairo-dev libcoordgen-dev libeigen3-dev libfreetype6-dev libmaeparser-dev librsvg2-bin libsqlite3-dev pandoc postgresql-server-dev-all python3-dev python3-numpy python3-pandas python3-pil | python3-imaging python3-recommonmark python3-sphinx python3-sqlalchemy rapidjson-dev tex-gyre texlive-fonts-recommended texlive-latex-base texlive-latex-extra texlive-latex-recommended W: Unmet build-dependency in source dh /usr/share/postgresql-common/pgxs_debian_control.mk --with python3 --buildsystem=cmake --parallel dh: error: Unknown sequence /usr/share/postgresql-common/pgxs_debian_control.mk (choose from: binary binary-arch binary-indep build build-arch build-indep clean install install-arch install-indep) debian/rules:37: /usr/share/postgresql-common/pgxs_debian_control.mk: No such file or directory make: *** [debian/rules:40: /usr/share/postgresql-common/pgxs_debian_control.mk] Error 25 gbp:error: 'git-pbuilder' failed: it exited with 2  Now our debian/rules (aka, a Debian packaging-flavored Makefile) is relying on the existence of a file but failing to load it, causing the Makefile to fail before package resolution can happen. This is a confusing situation and definitely points to tool roughness.\nLet\u0026rsquo;s use apt-file to see what packages provides the missing path:\n# apt-get install -y apt-file # apt-file update # apt-file search /usr/share/postgresql-common/pgxs_debian_control.mk postgresql-server-dev-all: /usr/share/postgresql-common/pgxs_debian_control.mk  And we definitely had postgresql-server-dev-all in the build-depends of debian/control. Sounds like a race, the debian/rules can\u0026rsquo;t evaluate with a package from build-depends and the build-depends can\u0026rsquo;t be satisfied until debian/rules is run. How about we shoe-horn this package in to the debootstrap\u0026rsquo;d filesystem?\nFrom the host OS let\u0026rsquo;s see if we can understand this package more:\n# apt-cache show postgresql-server-dev-all # heavily edited output Package: postgresql-server-dev-all Section: universe/database Origin: Ubuntu Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; Original-Maintainer: Debian PostgreSQL Maintainers \u0026lt;team+postgresql@tracker.debian.org\u0026gt; Filename: pool/universe/p/postgresql-common/postgresql-server-dev-all_238_arm64.deb  I see a lot of references to universe but I only saw main in the debootstrap invocation, which I copy here:\nI: forking: pbuilder create --debootstrapopts --include=\u0026quot;postgresql-server-dev-all\u0026quot; --buildplace /var/cache/pbuilder/base-jammy.cow --mirror http://ports.ubuntu.com/ubuntu-ports/ --distribution jammy --no-targz --extrapackages cowdancer I: Checking component main on http://ports.ubuntu.com/ubuntu-ports...  but no universe. Those repositories are described here: https://help.ubuntu.com/community/Repositories/Ubuntu. But essentially universe gets less attention from Ubuntu/Canonical but it has this postgresql dev package.\nso let\u0026rsquo;s destroy our incomplete filesystem and bootstrap it again, including universe in the package list:\nrdkit# rm -rf /var/cache/pbuilder/base-jammy.cow rdkit# DIST=jammy git-pbuilder create --debootstrapopts=--components=\u0026quot;main,universe\u0026quot; [[[ SNIP ]]] rdkit# gbp buildpackage --git-no-pristine-tar --git-ignore-new --git-pbuilder --git-dist=jammy dh /usr/share/postgresql-common/pgxs_debian_control.mk --with python3 --buildsystem=cmake --parallel make: dh: No such file or directory debian/rules:37: /usr/share/postgresql-common/pgxs_debian_control.mk: No such file or directory make: *** [debian/rules:40: /usr/share/postgresql-common/pgxs_debian_control.mk] Error 127 gbp:error: 'git-pbuilder' failed: it exited with 2  still erroring on the missing file, the build machinery is not loading the dependency, so let\u0026rsquo;s recreate the filesystem again but force the install of postgresql-server-dev-all and debhelper (the source of /usr/bin/dh) and dh-python (the source of python3 support in builds):\n# rm -rf /var/cache/pbuilder/base-jammy.cow # DIST=jammy git-pbuilder create --debootstrapopts=--components=\u0026quot;main,universe\u0026quot; --debootstrapopts=--include=\u0026quot;postgresql-server-dev-all debhelper dh-python\u0026quot;  at this point I have used DIST=jammy git-pbuilder login to hop in to the filesystem and confirm files exist and things are still not working. I\u0026rsquo;m suspicious if this part of the build is inside the chroot jail or on the host, let\u0026rsquo;s install on the host:\n# apt-get install -y postgresql-server-dev-all debhelper dh-python # gbp buildpackage --git-no-pristine-tar --git-ignore-new --git-pbuilder --git-dist=jammy [[[ SNIP ]]] pg_buildext checkcontrol --- debian/control 2023-03-08 17:17:49.451838004 +0000 +++ debian/control.EuTFyl 2023-03-08 17:51:28.825813007 +0000 @@ -166,10 +166,10 @@ . This package contains the header files. -Package: postgresql-15-rdkit +Package: postgresql-14-rdkit Architecture: any Section: database -Depends: ${misc:Depends}, ${shlibs:Depends}, postgresql-15 +Depends: ${misc:Depends}, ${shlibs:Depends}, postgresql-14 Suggests: Description: Cheminformatics and machine-learning software (PostgreSQL Cartridge) RDKit is a Python/C++ based cheminformatics and machine-learning software Error: debian/control needs updating from debian/control.in. Run 'pg_buildext updatecontrol'. If you are seeing this message in a buildd log, a sourceful upload is required. make: *** [/usr/share/postgresql-common/pgxs_debian_control.mk:9: debian/control] Error 1 gbp:error: 'git-pbuilder' failed: it exited with 2  finally a new error, pointing to a version mismatch between Debian (postgres 15) and Ubuntu Jammy (postgres 14), let\u0026rsquo;s try running the recommended fix pg_buildext updatecontrol:\nrdkit# pg_buildext updatecontrol  now the debian/control.in has been re-rendered to update debian/control and we can continue the build:\n# gbp buildpackage --git-no-pristine-tar --git-ignore-new --git-pbuilder --git-dist=jammy gbp:info: Building with (cowbuilder) for jammy gbp:info: Performing the build [[[ SNIP ]]] debian/rules override_dh_auto_clean make[1]: Entering directory '/rdkit' find /rdkit -name \u0026quot;*.pyc\u0026quot; | xargs rm -f [[[ SNIP ]]] Preparing to unpack .../075-libxcb-shm0_1.14-3ubuntu3_arm64.deb ... Unpacking libxcb-shm0:arm64 (1.14-3ubuntu3) ... [[[ SNIP ]]] make[1]: Entering directory '/build/rdkit-202209.3' dh_auto_configure -- -DCMAKE_BUILD_TYPE=None -DCMAKE_SKIP_RPATH=ON -DRDK_INSTALL_INTREE=OFF -DRDK_INSTALL_STATIC_LIBS=OFF -DRDK_BUILD_THREADSAFE_SSS=ON -DRDK_BUILD_PYTHON_WRAPPERS=ON -DRDK_OPTIMIZE_POPCNT=OFF -DRDK_USE_URF=OFF -DRDK_INSTALL_COMIC_FONTS=OFF -DRDK_BUILD_CAIRO_SUPPORT=ON -DBoost_NO_BOOST_CMAKE=TRUE -DCMAKE_INSTALL_PREFIX=/usr -DCATCH_DIR=/usr/include/catch2 -DPYTHON_EXECUTABLE=/usr/bin/python3.10 ../ [[[ SNIP ]]] [ 0%] Building CXX object Code/RDGeneral/CMakeFiles/RDGeneral.dir/Invariant.cpp.o cd /build/rdkit-202209.3/obj-aarch64-linux-gnu/Code/RDGeneral \u0026amp;\u0026amp; /usr/bin/c++ -DBOOST_SERIALIZATION_DYN_LINK -DRDGeneral_EXPORTS -DRDKIT_DYN_LINK -DRDKIT_RDGENERAL_BUILD -DRDK_64BIT_BUILD -DRDK_BUILD_COORDGEN_SUPPORT -DRDK_BUILD_DESCRIPTORS3D -DRDK_BUILD_MAEPARSER_SUPPORT -DRDK_BUILD_THREADSAFE_SSS -DRDK_HAS_EIGEN3 -DRDK_TEST_MULTITHREADED -DRDK_USE_BOOST_SERIALIZATION -DRDK_USE_STRICT_ROTOR_DEFINITION -I/build/rdkit-202209.3/External -I/usr/include/python3.10 -I/usr/lib/python3/dist-packages/numpy/core/include -I/build/rdkit-202209.3/Code -isystem /usr/include/eigen3 -g -O2 -ffile-prefix-map=/build/rdkit-202209.3=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -Wdate-time -D_FORTIFY_SOURCE=2 -Wno-deprecated -Wno-unused-function -fno-strict-aliasing -Wall -Wextra -fPIC -fPIC -std=gnu++17 -MD -MT Code/RDGeneral/CMakeFiles/RDGeneral.dir/Invariant.cpp.o -MF CMakeFiles/RDGeneral.dir/Invariant.cpp.o.d -o CMakeFiles/RDGeneral.dir/Invariant.cpp.o -c /build/rdkit-202209.3/Code/RDGeneral/Invariant.cpp  Finally! We see the C++ compiler is being used, the rdkit source code is compiled. At the end of the process we will have a collection of debian package files suitable for installing on Jammy.\nTakeaways:\n bootstrapping the cowbuilder filesystem needs main and universe the build host stills needs a fair bit of configuration, installing postgresql-server-dev-all, debhelper, dh-python which are used outside the cowbuilder context you have to get used to running commands, reading opaque errors, deleting resources and trying again  kudos to cowbuilder for aggressively caching apt downloads    Moving the process to GitHub Actions     In general, we never want to ship production assets from a workstation environment. We want to build our artifacts in an auditable, open environment with logging and timestamps. Enter GitHub Actions, a git event-triggered runtime environment where we can recreate the above workflow.\nYou will need to create a .github/workflows/ci.yml with all the above steps redone in a clean manner:\nname: Build and publish Debian packages on: push: {} jobs: build_amd64: runs-on: buildjet-16vcpu-ubuntu-2204 env: DIST: jammy ARCH: amd64 DEB_BUILD_OPTIONS: nocheck steps: - name: Check out the repo uses: actions/checkout@v3 with: fetch-depth: 0 - name: Install build tools run: sudo apt-get update; sudo apt-get install -y git build-essential git-buildpackage debhelper dh-python - name: Create base image run: git-pbuilder create - name: Remove github stuff run: rm -rf .github/ - name: Build package run: gbp buildpackage --git-ignore-new --git-pbuilder --git-no-pristine-tar --git-arch=$ARCH --git-dist=$DIST -us -uc - name: Check for debs run: ls -alh .; ls -alh ..  and at the end of the run you will have .deb files in the filesystem of the github actions runner:\ntotal 245M drwxrwxr-x 3 runner runner 4.0K Mar 7 19:40 . drwxrwxr-x 6 runner runner 4.0K Mar 7 19:30 .. -rw-r--r-- 1 runner runner 380K Mar 7 19:39 librdkit-dev_202209.3-2_amd64.deb -rw-r--r-- 1 runner runner 88M Mar 7 19:39 librdkit1-dbgsym_202209.3-2_amd64.ddeb -rw-r--r-- 1 runner runner 4.3M Mar 7 19:39 librdkit1_202209.3-2_amd64.deb -rw-r--r-- 1 runner runner 107K Mar 7 19:39 postgresql-15-rdkit_202209.3-2_amd64.deb -rw-r--r-- 1 runner runner 50M Mar 7 19:39 python3-rdkit-dbgsym_202209.3-2_amd64.ddeb -rw-r--r-- 1 runner runner 4.2M Mar 7 19:39 python3-rdkit_202209.3-2_amd64.deb -rw-r--r-- 1 runner runner 13M Mar 7 19:40 rdkit-data_202209.3-2_all.deb drwxrwxr-x 16 runner runner 4.0K Mar 7 19:32 rdkit-debian -rw-r--r-- 1 runner runner 7.4M Mar 7 19:39 rdkit-doc_202209.3-2_all.deb -rw-rw-r-- 1 runner runner 99K Mar 7 19:33 rdkit_202209.3-2.debian.tar.xz -rw-rw-r-- 1 runner runner 2.0K Mar 7 19:33 rdkit_202209.3-2.dsc -rw-rw-r-- 1 runner runner 2.6M Mar 7 19:40 rdkit_202209.3-2_amd64.build -rw-r--r-- 1 runner runner 19K Mar 7 19:40 rdkit_202209.3-2_amd64.buildinfo -rw-r--r-- 1 runner runner 4.1K Mar 7 19:40 rdkit_202209.3-2_amd64.changes -rw-r--r-- 1 runner runner 1.2K Mar 7 19:40 rdkit_202209.3-2_source.changes -rw-rw-r-- 1 runner runner 76M Mar 7 19:32 rdkit_202209.3.orig.tar.gz  Publishing Debian Packages     A .deb file on its own is not the most user-friendly. It can be downloaded to a machine and manually installed with dpkg -i librdkit-dev_202209.3-2_amd64.deb but dpkg can\u0026rsquo;t perform any dependency resolution. You almost always want to use apt, and if you get an apt compatible archive (the convention is managed by apt-transport-http) installation becomes as easy as apt-get install $pkg\nSo what\u0026rsquo;s in an APT HTTP archive? It\u0026rsquo;s a convention of what files exist at what paths in an HTTP server:\n You don\u0026rsquo;t need any kind of directory listing, just the ability to HTTP GET files A root URI for the archive, for example: https://ports.ubuntu.com/ A distribution/codename which further builds $ROOT_URI/dists/$CODENAME like https://ports.ubuntu.com/dists/jammy A repository like main which further builds $ROOT_URI/dists/$CODENAME/$REPOSITORY like: https://ports.ubuntu.com/dists/jammy/main The apt tooling will generate a URI for downloading the full inventory of available packages, using the host architecture: $ROOT_URI/dists/$CODENAME/$REPOSITORY/$arch-binary/Packages.gz  This compressed file has the packages, their dependencies names and constraints, and relative path information for downloading the deb file. For example pool/universe/p/postgresql-common/postgresql-server-dev-all_238_arm64.deb    We do not want to maintain all these details of this directory layout and metadata. And each time we add a new package we have to upsert the details in to Packages.gz.\nEnter deb-s3 which handles the repository layout, uploading files, all in to a commodity-price S3 bucket. Read more on their github page. I won\u0026rsquo;t go over how to authenticate with AWS for S3, or how to create a public-read S3 bucket. But assuming you have credentials setup, this GitHub Action run will install deb-s3 and upload the .deb files to the correct spot:\n# Upload a file to AWS s3 - name: Copy index.html to s3 run: | sudo apt-get install ruby awscli sudo gem install deb-s3 aws sts get-caller-identity aws s3 ls s3://rdkit-rs-debian/ deb-s3 upload --bucket=rdkit-rs-debian --s3-region=eu-central-1 --arch=$ARCH --codename=$DIST ../*.deb  Now you can configure a Jammy installation to reference this repository by configure apt with this config file:\n# echo 'deb [trusted=yes] https://rdkit-rs-debian.s3.amazonaws.com jammy main' \u0026gt; /etc/apt/sources.list.d/rdkit-rs.list # apt-get update Hit:1 http://ports.ubuntu.com/ubuntu-ports jammy InRelease Get:2 http://ports.ubuntu.com/ubuntu-ports jammy-updates InRelease [119 kB] Hit:3 http://ports.ubuntu.com/ubuntu-ports jammy-backports InRelease Get:4 http://ports.ubuntu.com/ubuntu-ports jammy-security InRelease [110 kB] Ign:5 https://rdkit-rs-debian.s3.amazonaws.com jammy InRelease Get:6 http://ports.ubuntu.com/ubuntu-ports jammy-updates arm64 Contents (deb) [54.0 MB] Get:7 https://rdkit-rs-debian.s3.amazonaws.com jammy Release [2359 B] Ign:8 https://rdkit-rs-debian.s3.amazonaws.com jammy Release.gpg Get:9 https://rdkit-rs-debian.s3.amazonaws.com jammy/main arm64 Packages [2042 B] Get:10 http://ports.ubuntu.com/ubuntu-ports jammy-security arm64 Contents (deb) [47.6 MB] Fetched 102 MB in 18s (5677 kB/s) Reading package lists... Done  Here you can see apt is able to pull out the metadata from our custom archive, we can ask apt questions about rdkit packages and get references to both the official Ubuntu releases and our custom release:\n# apt-cache policy librdkit1 librdkit1: Installed: (none) Candidate: 202209.3-2 Version table: 202209.3-2 500 500 https://rdkit-rs-debian.s3.amazonaws.com jammy/main arm64 Packages 202109.2-1build1 500 500 http://ports.ubuntu.com/ubuntu-ports jammy/universe arm64 Packages  And luckily our rdkit package has the highest priority, so we can install it without further configuration:\n# apt-get install -y librdkit1 Reading package lists... Done Building dependency tree... Done Reading state information... Done The following additional packages will be installed: libboost-iostreams1.74.0 libboost-python1.74.0 libboost-serialization1.74.0 libcairo2 libcoordgen3 libmaeparser1 libpixman-1-0 libxcb-render0 libxcb-shm0 libxrender1 The following NEW packages will be installed: libboost-iostreams1.74.0 libboost-python1.74.0 libboost-serialization1.74.0 libcairo2 libcoordgen3 libmaeparser1 libpixman-1-0 librdkit1 libxcb-render0 libxcb-shm0 libxrender1 0 upgraded, 11 newly installed, 0 to remove and 2 not upgraded. Need to get 6102 kB of archives. After this operation, 26.7 MB of additional disk space will be used. Get:1 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 libboost-iostreams1.74.0 arm64 1.74.0-14ubuntu3 [243 kB] Get:2 https://rdkit-rs-debian.s3.amazonaws.com jammy/main arm64 librdkit1 arm64 202209.3-2 [4144 kB] Get:3 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 libboost-python1.74.0 arm64 1.74.0-14ubuntu3 [293 kB] Get:4 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 libboost-serialization1.74.0 arm64 1.74.0-14ubuntu3 [319 kB] Get:5 http://ports.ubuntu.com/ubuntu-ports jammy-updates/main arm64 libpixman-1-0 arm64 0.40.0-1ubuntu0.22.04.1 [160 kB] Get:6 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 libxcb-render0 arm64 1.14-3ubuntu3 [16.2 kB] Get:7 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 libxcb-shm0 arm64 1.14-3ubuntu3 [5848 B] Get:8 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 libxrender1 arm64 1:0.9.10-1build4 [18.8 kB] Get:9 http://ports.ubuntu.com/ubuntu-ports jammy/main arm64 libcairo2 arm64 1.16.0-5ubuntu2 [613 kB] Get:10 http://ports.ubuntu.com/ubuntu-ports jammy/universe arm64 libcoordgen3 arm64 3.0.0-2 [209 kB] Get:11 http://ports.ubuntu.com/ubuntu-ports jammy/universe arm64 libmaeparser1 arm64 1.2.4-1build1 [80.2 kB] Fetched 6102 kB in 4s (1725 kB/s) debconf: delaying package configuration, since apt-utils is not installed Selecting previously unselected package libboost-iostreams1.74.0:arm64. (Reading database ... 36587 files and directories currently installed.) Preparing to unpack .../00-libboost-iostreams1.74.0_1.74.0-14ubuntu3_arm64.deb ... Unpacking libboost-iostreams1.74.0:arm64 (1.74.0-14ubuntu3) ... Selecting previously unselected package libboost-python1.74.0. Preparing to unpack .../01-libboost-python1.74.0_1.74.0-14ubuntu3_arm64.deb ... Unpacking libboost-python1.74.0 (1.74.0-14ubuntu3) ... Selecting previously unselected package libboost-serialization1.74.0:arm64. Preparing to unpack .../02-libboost-serialization1.74.0_1.74.0-14ubuntu3_arm64.deb ... Unpacking libboost-serialization1.74.0:arm64 (1.74.0-14ubuntu3) ... Selecting previously unselected package libpixman-1-0:arm64. Preparing to unpack .../03-libpixman-1-0_0.40.0-1ubuntu0.22.04.1_arm64.deb ... Unpacking libpixman-1-0:arm64 (0.40.0-1ubuntu0.22.04.1) ... Selecting previously unselected package libxcb-render0:arm64. Preparing to unpack .../04-libxcb-render0_1.14-3ubuntu3_arm64.deb ... Unpacking libxcb-render0:arm64 (1.14-3ubuntu3) ... Selecting previously unselected package libxcb-shm0:arm64. Preparing to unpack .../05-libxcb-shm0_1.14-3ubuntu3_arm64.deb ... Unpacking libxcb-shm0:arm64 (1.14-3ubuntu3) ... Selecting previously unselected package libxrender1:arm64. Preparing to unpack .../06-libxrender1_1%3a0.9.10-1build4_arm64.deb ... Unpacking libxrender1:arm64 (1:0.9.10-1build4) ... Selecting previously unselected package libcairo2:arm64. Preparing to unpack .../07-libcairo2_1.16.0-5ubuntu2_arm64.deb ... Unpacking libcairo2:arm64 (1.16.0-5ubuntu2) ... Selecting previously unselected package libcoordgen3:arm64. Preparing to unpack .../08-libcoordgen3_3.0.0-2_arm64.deb ... Unpacking libcoordgen3:arm64 (3.0.0-2) ... Selecting previously unselected package libmaeparser1:arm64. Preparing to unpack .../09-libmaeparser1_1.2.4-1build1_arm64.deb ... Unpacking libmaeparser1:arm64 (1.2.4-1build1) ... Selecting previously unselected package librdkit1. Preparing to unpack .../10-librdkit1_202209.3-2_arm64.deb ... Unpacking librdkit1 (202209.3-2) ... Setting up libpixman-1-0:arm64 (0.40.0-1ubuntu0.22.04.1) ... Setting up libxrender1:arm64 (1:0.9.10-1build4) ... Setting up libxcb-render0:arm64 (1.14-3ubuntu3) ... Setting up libboost-iostreams1.74.0:arm64 (1.74.0-14ubuntu3) ... Setting up libxcb-shm0:arm64 (1.14-3ubuntu3) ... Setting up libcairo2:arm64 (1.16.0-5ubuntu2) ... Setting up libmaeparser1:arm64 (1.2.4-1build1) ... Setting up libboost-serialization1.74.0:arm64 (1.74.0-14ubuntu3) ... Setting up libcoordgen3:arm64 (3.0.0-2) ... Setting up libboost-python1.74.0 (1.74.0-14ubuntu3) ... Setting up librdkit1 (202209.3-2) ... Processing triggers for libc-bin (2.35-0ubuntu3.1) ...  You can see the apt dependency resolver is mixing S3 debian files with official files. Meaning we are spliced in to the dependency tree just right!\nConclusion     We can now install our custom rdkit in seconds, never having to worry about install build dependencies, those are all relegated to the CI pipeline environment. The runtime footprint is complete but tight and we can continue to pull in the wisdom from the DebiChem team while controlling the whole process for our own needs.\nFurther reading      http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.html https://en.wikipedia.org/wiki/Chroot https://wiki.debian.org/DebianRepository/Format  ","description":"Debian is an operating system with a rich packaging format and dependency resolution system. It runs on the Linux kernel and provides over 80,000 packages. Packages ranging from shells like bash, server software like nginx, desktop software like Firefox, and even full-blown desktop environments like Gnome. The Ubuntu operating system is a Debian variant which adopts many of the same packages as Debian, providing a commercial facade and a different, potentially favorable package lifecycle."},{"id":1,"href":"/","title":"RDKit-rs","parent":"","content":"{{ range .Pages }}  {{.Date.Format \u0026ldquo;2006-01-02\u0026rdquo;}} | {{.Title}}  {{ end }}\n \nThe power and speed of RDKit, the safety of Rust! A combination of low level C++ bindings and useful high level Rust constructs so you can\n Parse mol/molblocks Normalize Fingerprint Enumerate tautomers/canonicalize  How does it work?   The rdkit-rs project provides two key libraries: rdkit and rdkit-sys. The sys package is a collection of low or zero-cost wrappers exposing a key subset of the RDKit C++ functionality. The rdkit package builds on top of the sys package, hiding pointers and providing idiomatic Rust interfaces (think: Debug and Clone implementations, smart borrowing behavior).\nWith the rdkit library you will never need to manually free memory or worry about accessing null pointers. You also get all the benefits of an optimizing compiler and will never wait for garbage collection.\nExample   in your Cargo.toml:\n[dependencies] rdkit = \u0026#34;*\u0026#34; If you satisfy the requirements below, the following code should just compile!\nuserdkit::{Properties,ROMol};pubfn main(){letmol=ROMol::from_smile(\u0026#34;c1ccccc1C(=O)NC\u0026#34;).unwrap();letproperties=Properties::new();letcomputed: HashMap\u0026lt;String,f64\u0026gt;=properties.compute_properties(\u0026amp;mol);assert_eq!(*computed.get(\u0026#34;NumAtoms\u0026#34;).unwrap(),19.0);}Browse more rdkit-rs/rdkit examples\nRequirements   We support recent stable Rust versions. The limiting factor is whatever our C++ bindings library, cxx-rs, supports. Check the cxx Cargo.toml to confirm what rust-version is supported.\nRequires a recent version of RDKit, tested against 2022.03.1. Supports both static and dynamic linking, preferring static linking. You can use a copy of RDKit installed either from Mac homebrew or Conda Forge. We are working to get Debian packages updated for the most recent RDKit and also including static libraries so we can build portable RDKit applications.\n brew install rdkit conda install -c conda-forge rdkit==2022.03.1  Ubuntu support is coming soon.\nYou will also need a compiler for building the sys package\u0026rsquo;s C++ bridge. We recommend clang for the compilation speed.\nWhy Rust?   Rust is a powerful systems level programming language, offering a smart static typing system, an integrated build system and package manager, and strong memory safety, among many other benefits. Read more about Rust in the free Rust Book.\nIssues?   Please file an issue on GitHub\n","description":"{{ range .Pages }}  {{.Date.Format \u0026ldquo;2006-01-02\u0026rdquo;}} | {{.Title}}  {{ end }}\n \nThe power and speed of RDKit, the safety of Rust! A combination of low level C++ bindings and useful high level Rust constructs so you can\n Parse mol/molblocks Normalize Fingerprint Enumerate tautomers/canonicalize  How does it work?   The rdkit-rs project provides two key libraries: rdkit and rdkit-sys. The sys package is a collection of low or zero-cost wrappers exposing a key subset of the RDKit C++ functionality."},{"id":2,"href":"/tags/","title":"Tags","parent":"RDKit-rs","content":"","description":""},{"id":3,"href":"/tutorials/","title":"Tutorials","parent":"RDKit-rs","content":"","description":""}]